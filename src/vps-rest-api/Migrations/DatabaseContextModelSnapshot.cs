// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace vpsrestapi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Models.Circuit", b =>
                {
                    b.Property<int>("circuitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("alt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("circuitRef")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("lat")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal>("lng")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("url")
                        .HasColumnType("TEXT");

                    b.HasKey("circuitId");

                    b.ToTable("Circuits");
                });

            modelBuilder.Entity("Models.Driver", b =>
                {
                    b.Property<int>("driverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("dob")
                        .HasColumnType("date");

                    b.Property<string>("driverRef")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("forename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("nationality")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("url")
                        .HasColumnType("TEXT");

                    b.HasKey("driverId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Models.DriverStanding", b =>
                {
                    b.Property<int>("driverStandingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("driverId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("points")
                        .HasColumnType("REAL");

                    b.Property<int>("position")
                        .HasColumnType("INTEGER");

                    b.Property<string>("positionText")
                        .HasColumnType("TEXT");

                    b.Property<int>("raceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("wins")
                        .HasColumnType("INTEGER");

                    b.HasKey("driverStandingsId");

                    b.ToTable("DriverStandings");
                });

            modelBuilder.Entity("Models.LapTime", b =>
                {
                    b.Property<int>("raceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("driverId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("lap")
                        .HasColumnType("INTEGER");

                    b.Property<float>("milliseconds")
                        .HasColumnType("REAL");

                    b.Property<int>("position")
                        .HasColumnType("INTEGER");

                    b.Property<string>("time")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("raceId", "driverId", "lap");

                    b.ToTable("LapTimes");
                });

            modelBuilder.Entity("Models.Race", b =>
                {
                    b.Property<int>("raceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("circuitId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("fp1Date")
                        .HasColumnType("date");

                    b.Property<string>("fp1Time")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("fp2Date")
                        .HasColumnType("date");

                    b.Property<string>("fp2Time")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("fp3Date")
                        .HasColumnType("date");

                    b.Property<string>("fp3Time")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("qualiDate")
                        .HasColumnType("date");

                    b.Property<string>("qualiTime")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<int>("round")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("sprintDate")
                        .HasColumnType("date");

                    b.Property<string>("sprintTime")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("time")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("year")
                        .HasColumnType("INTEGER");

                    b.HasKey("raceId");

                    b.ToTable("Races");
                });
#pragma warning restore 612, 618
        }
    }
}
